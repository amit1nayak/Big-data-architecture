apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: broker
    name: broker
  spec:
    ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    selector:
      io.kompose.service: broker
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: connect
    name: connect
  spec:
    ports:
    - name: "8083"
      port: 8083
      targetPort: 8083
    selector:
      io.kompose.service: connect
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: control-center
    name: control-center
  spec:
    ports:
    - name: "9021"
      port: 9021
      targetPort: 9021
    selector:
      io.kompose.service: control-center
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: ksql-server
    name: ksql-server
  spec:
    ports:
    - name: "8088"
      port: 8088
      targetPort: 8088
    selector:
      io.kompose.service: ksql-server
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: rest-proxy
    name: rest-proxy
  spec:
    ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
    selector:
      io.kompose.service: rest-proxy
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: schema-registry
    name: schema-registry
  spec:
    ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
    selector:
      io.kompose.service: schema-registry
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: zookeeper
    name: zookeeper
  spec:
    ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
    selector:
      io.kompose.service: zookeeper
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: broker
    name: broker
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: broker
      spec:
        containers:
        - env:
          - name: CONFLUENT_METRICS_ENABLE
            value: "true"
          - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
            value: broker:29092
          - name: CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS
            value: "1"
          - name: CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          - name: CONFLUENT_SUPPORT_CUSTOMER_ID
            value: anonymous
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
            value: "0"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          - name: KAFKA_METRIC_REPORTERS
            value: io.confluent.metrics.reporter.ConfluentMetricsReporter
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          image: confluentinc/cp-enterprise-kafka:5.3.1
          name: broker
          ports:
          - containerPort: 9092
          resources: {}
        hostname: broker
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: connect
    name: connect
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: connect
      spec:
        containers:
        - env:
          - name: CLASSPATH
            value: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.1.jar
          - name: CONNECT_BOOTSTRAP_SERVERS
            value: broker:29092
          - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
            value: "1"
          - name: CONNECT_CONFIG_STORAGE_TOPIC
            value: docker-connect-configs
          - name: CONNECT_CONSUMER_INTERCEPTOR_CLASSES
            value: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
          - name: CONNECT_GROUP_ID
            value: compose-connect-group
          - name: CONNECT_INTERNAL_KEY_CONVERTER
            value: org.apache.kafka.connect.json.JsonConverter
          - name: CONNECT_INTERNAL_VALUE_CONVERTER
            value: org.apache.kafka.connect.json.JsonConverter
          - name: CONNECT_KEY_CONVERTER
            value: org.apache.kafka.connect.storage.StringConverter
          - name: CONNECT_LOG4J_LOGGERS
            value: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
          - name: CONNECT_OFFSET_FLUSH_INTERVAL_MS
            value: "10000"
          - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
            value: "1"
          - name: CONNECT_OFFSET_STORAGE_TOPIC
            value: docker-connect-offsets
          - name: CONNECT_PLUGIN_PATH
            value: /usr/share/java,/usr/share/confluent-hub-components
          - name: CONNECT_PRODUCER_INTERCEPTOR_CLASSES
            value: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
          - name: CONNECT_REST_ADVERTISED_HOST_NAME
            value: connect
          - name: CONNECT_REST_PORT
            value: "8083"
          - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
            value: "1"
          - name: CONNECT_STATUS_STORAGE_TOPIC
            value: docker-connect-status
          - name: CONNECT_VALUE_CONVERTER
            value: io.confluent.connect.avro.AvroConverter
          - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
            value: http://schema-registry:8081
          - name: CONNECT_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          image: cnfldemos/kafka-connect-datagen:0.1.3-5.3.1
          name: connect
          ports:
          - containerPort: 8083
          resources: {}
        hostname: connect
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: control-center
    name: control-center
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: control-center
      spec:
        containers:
        - env:
          - name: CONFLUENT_METRICS_TOPIC_REPLICATION
            value: "1"
          - name: CONTROL_CENTER_BOOTSTRAP_SERVERS
            value: broker:29092
          - name: CONTROL_CENTER_CONNECT_CLUSTER
            value: connect:8083
          - name: CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS
            value: "1"
          - name: CONTROL_CENTER_KSQL_ADVERTISED_URL
            value: http://localhost:8088
          - name: CONTROL_CENTER_KSQL_URL
            value: http://ksql-server:8088
          - name: CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS
            value: "1"
          - name: CONTROL_CENTER_REPLICATION_FACTOR
            value: "1"
          - name: CONTROL_CENTER_SCHEMA_REGISTRY_URL
            value: http://schema-registry:8081
          - name: CONTROL_CENTER_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          - name: PORT
            value: "9021"
          image: confluentinc/cp-enterprise-control-center:5.3.1
          name: control-center
          ports:
          - containerPort: 9021
          resources: {}
        hostname: control-center
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: ksql-cli
    name: ksql-cli
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: ksql-cli
      spec:
        containers:
        - command:
          - /bin/sh
          image: confluentinc/cp-ksql-cli:5.3.1
          name: ksql-cli
          resources: {}
          tty: true
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: ksql-datagen
    name: ksql-datagen
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: ksql-datagen
      spec:
        containers:
        - args:
          - bash
          - -c
          - echo Waiting for Kafka to be ready... && cub kafka-ready -b broker:29092
            1 40 && echo Waiting for Confluent Schema Registry to be ready... && cub
            sr-ready schema-registry 8081 40 && echo Waiting a few seconds for topic
            creation to finish... && sleep 11 && tail -f /dev/null
          env:
          - name: KSQL_CONFIG_DIR
            value: /etc/ksql
          - name: KSQL_LOG4J_OPTS
            value: -Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties
          - name: STREAMS_BOOTSTRAP_SERVERS
            value: broker:29092
          - name: STREAMS_SCHEMA_REGISTRY_HOST
            value: schema-registry
          - name: STREAMS_SCHEMA_REGISTRY_PORT
            value: "8081"
          image: confluentinc/ksql-examples:5.3.1
          name: ksql-datagen
          resources: {}
        hostname: ksql-datagen
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: ksql-server
    name: ksql-server
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: ksql-server
      spec:
        containers:
        - env:
          - name: KSQL_BOOTSTRAP_SERVERS
            value: broker:29092
          - name: KSQL_CACHE_MAX_BYTES_BUFFERING
            value: "0"
          - name: KSQL_CONFIG_DIR
            value: /etc/ksql
          - name: KSQL_CONSUMER_INTERCEPTOR_CLASSES
            value: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
          - name: KSQL_HOST_NAME
            value: ksql-server
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: http://schema-registry:8081
          - name: KSQL_LISTENERS
            value: http://0.0.0.0:8088
          - name: KSQL_LOG4J_OPTS
            value: -Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties
          - name: KSQL_PRODUCER_INTERCEPTOR_CLASSES
            value: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
          image: confluentinc/cp-ksql-server:5.3.1
          name: ksql-server
          ports:
          - containerPort: 8088
          resources: {}
        hostname: ksql-server
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: rest-proxy
    name: rest-proxy
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: rest-proxy
      spec:
        containers:
        - env:
          - name: KAFKA_REST_BOOTSTRAP_SERVERS
            value: broker:29092
          - name: KAFKA_REST_HOST_NAME
            value: rest-proxy
          - name: KAFKA_REST_LISTENERS
            value: http://0.0.0.0:8082
          - name: KAFKA_REST_SCHEMA_REGISTRY_URL
            value: http://schema-registry:8081
          image: confluentinc/cp-kafka-rest:5.3.1
          name: rest-proxy
          ports:
          - containerPort: 8082
          resources: {}
        hostname: rest-proxy
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: schema-registry
    name: schema-registry
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: schema-registry
      spec:
        containers:
        - env:
          - name: SCHEMA_REGISTRY_HOST_NAME
            value: schema-registry
          - name: SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL
            value: zookeeper:2181
          image: confluentinc/cp-schema-registry:5.3.1
          name: schema-registry
          ports:
          - containerPort: 8081
          resources: {}
        hostname: schema-registry
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o confluent_kafka.yml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: zookeeper
    name: zookeeper
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: zookeeper
      spec:
        containers:
        - env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_TICK_TIME
            value: "2000"
          image: confluentinc/cp-zookeeper:5.3.1
          name: zookeeper
          ports:
          - containerPort: 2181
          resources: {}
        hostname: zookeeper
        restartPolicy: Always
  status: {}
kind: List
metadata: {}

